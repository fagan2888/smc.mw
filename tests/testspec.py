#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2014, 7, 26, 12, 12, 9, 5)

__all__ = [
    'testspecParser',
    'testspecSemantics',
    'main'
]


class testspecParser(Parser):
    def __init__(self, whitespace='', nameguard=False, **kwargs):
        super(testspecParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _document_(self):
        self._text_()

        def block1():
            self._element_()
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._check_eof()

    @graken()
    def _element_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._article_()
                with self._option():
                    self._test_()
                self._error('no available options')
        self.ast['@'] = self.last_node
        self._text_()

    @graken()
    def _cmd_(self):
        self._pattern(r'!![ \t]*')

    @graken()
    def _cmd_end_(self):
        self._pattern(r':?[ \t]*\n')

    @graken()
    def _article_(self):
        self._article_title_()
        self.ast['title'] = self.last_node
        self._article_text_()
        self.ast['text'] = self.last_node
        self._article_end_()

        self.ast._define(
            ['title', 'text'],
            []
        )

    @graken()
    def _article_title_(self):
        self._cmd_()
        self._token('article')
        self._cmd_end_()
        self._text_line_()
        self.ast['@'] = self.last_node

    @graken()
    def _article_text_(self):
        self._cmd_()
        self._token('text')
        self._cmd_end_()
        self._text_()
        self.ast['@'] = self.last_node

    @graken()
    def _article_end_(self):
        self._cmd_()
        self._token('endarticle')
        self._cmd_end_()

    @graken()
    def _test_(self):
        self._test_description_()
        self.ast['description'] = self.last_node
        with self._optional():
            self._test_options_()
            self.ast['options'] = self.last_node
        with self._optional():
            self._test_config_()
            self.ast['config'] = self.last_node
        self._test_input_()
        self.ast['input'] = self.last_node
        with self._optional():
            self._test_config_()
            self.ast['config'] = self.last_node
        self._test_result_()
        self.ast['result'] = self.last_node
        self._test_end_()

        self.ast._define(
            ['description', 'options', 'config', 'input', 'result'],
            []
        )

    @graken()
    def _test_description_(self):
        self._cmd_()
        self._token('test')
        self._cmd_end_()
        self._text_()
        self.ast['@'] = self.last_node

    @graken()
    def _test_options_(self):
        self._cmd_()
        self._token('options')
        self._cmd_end_()
        self._text_()
        self.ast['@'] = self.last_node

    @graken()
    def _test_config_(self):
        self._cmd_()
        self._token('config')
        self._cmd_end_()
        self._text_()
        self.ast['@'] = self.last_node

    @graken()
    def _test_input_(self):
        self._cmd_()
        self._token('input')
        self._cmd_end_()
        self._text_()
        self.ast['@'] = self.last_node

    @graken()
    def _test_result_(self):
        self._cmd_()
        self._token('result')
        self._cmd_end_()
        self._text_()
        self.ast['@'] = self.last_node

    @graken()
    def _test_end_(self):
        self._cmd_()
        self._token('end')
        self._cmd_end_()

    @graken()
    def _text_line_(self):
        with self._ifnot():
            self._token('!!')
        self._pattern(r'.*\n')

    @graken()
    def _text_(self):

        def block0():
            self._text_line_()
        self._closure(block0)


class testspecSemantics(object):
    def document(self, ast):
        return ast

    def element(self, ast):
        return ast

    def cmd(self, ast):
        return ast

    def cmd_end(self, ast):
        return ast

    def article(self, ast):
        return ast

    def article_title(self, ast):
        return ast

    def article_text(self, ast):
        return ast

    def article_end(self, ast):
        return ast

    def test(self, ast):
        return ast

    def test_description(self, ast):
        return ast

    def test_options(self, ast):
        return ast

    def test_config(self, ast):
        return ast

    def test_input(self, ast):
        return ast

    def test_result(self, ast):
        return ast

    def test_end(self, ast):
        return ast

    def text_line(self, ast):
        return ast

    def text(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = testspecParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in testspecParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for testspec.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace, whitespace=args.whitespace)
